generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URI")
}

enum Role {
  USER
  ADMIN
  SUPPORT
}

model User {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  email                   String                 @unique
  isVerified              Boolean                @default(false)
  emailVerified           DateTime?
  isSubmitted             Boolean                @default(false)
  password                String?
  isTwoFactorEnabled      Boolean                @default(true)
  twoFactorConfirmation   TwoFactorConfirmation?
  role                    Role                   @default(USER)
  firstName               String
  lastName                String
  complyClientId          String                 @unique
  userClass               String                 @default("customer")
  avatar                  String                 @default("/avatars/sampleUser.png")
  notificationPreferences String                 @default("email")
  dob                     String?
  phone                   String
  userName                String
  picIdFront              String?
  picIdBack               String?
  picHoldingId            String?
  typeOfId                String?
  idNumber                String?
  bvnNumber               String?
  purposeAccount          String?
  occupation              String?
  mapleRadCustomerId      String?
  country                 String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  address                 Address?
  wallets                 Wallet[]
  transactions            Transaction[]
  recipients              Recipient[]
  limits                  Limit[]
  accounts                Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Limit {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  currency         String
  deposit_daily    Float
  deposit_weekly   Float
  deposit_monthly  Float
  withdraw_daily   Float
  withdraw_monthly Float
  withdraw_weekly  Float
  userId           String @db.ObjectId
  user             User   @relation(fields: [userId], references: [id])
}

model ExchangeRate {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  currency   String
  marketRate Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Transaction {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  type                  String
  currency              String
  amount                Float
  status                TransactionStatus @default(SUBMITTED)
  comment               String            @default("")
  completedAt           DateTime?
  bankDetails           String?
  referenceId           String            @unique
  amountToSettle        Float?
  mapleRad              Json?
  fincraPayCode         String?
  fincraLink            String?
  fincraChargeReference String?
  fincraPhone           String?
  fincraPhoneOperator   String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  walletId              String            @db.ObjectId
  wallet                Wallet            @relation(fields: [walletId], references: [id])
  senderId              String            @db.ObjectId
  sender                User              @relation(fields: [senderId], references: [id])
}

enum TransactionStatus {
  SUBMITTED
  SUCCESS
  FAILED
}

model Wallet {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  currency              String
  amount                Float         @default(0.0)
  mapleRadCustomerId    String?
  mapleRadAccountNumber String?
  mapleRadAccountName   String?
  mapleRadBankName      String?
  mapleRadAccountId     String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  transactions          Transaction[]
  recipients            Recipient[]
  ownerId               String        @db.ObjectId
  owner                 User          @relation(fields: [ownerId], references: [id])
}

model Recipient {
  id                      String @id @default(auto()) @map("_id") @db.ObjectId
  beneficiaryHashId       String @unique
  beneficiaryBankName     String
  beneficiaryAcountNumber String
  beneficiaryPayoutMethod String
  ownerId                 String @db.ObjectId
  owner                   User   @relation(fields: [ownerId], references: [id])
  walletId                String @db.ObjectId
  wallet                  Wallet @relation(fields: [walletId], references: [id])
}

model Address {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  country      String
  countryCode  String
  postal       String
  userId       String  @unique @db.ObjectId
  user         User    @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
